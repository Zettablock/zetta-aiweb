name: STAGE deploy
on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
    paths: ['./**']
    workflow_dispatch:

permissions:
  contents: write

jobs:
  build-deploy-staging:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GHA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GHA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          WEB_ORIGIN: ${{ vars.WEB_ORIGIN_STAGE }}
          AI_API_KEY: ${{ vars.DEV_AI_API_KEY }}
          AUTH_CLIENT_ID: ${{ vars.DEV_AUTH_CLIENT_ID }}
          KV_REST_API_URL: ${{ vars.DEV_KV_REST_API_URL }}
          KV_REST_API_TOKEN: ${{ vars.DEV_KV_REST_API_TOKEN }}
          NEXT_PUBLIC_SEGMENT_WRITE_KEY: ${{ vars.DEV_SEGMENT_WRITE_KEY }}
          NEXT_PUBLIC_BASEPATH: ${{ vars.NEXT_PUBLIC_BASEPATH }}
        run: |
          # docker kill $(docker ps -aq) && docker rm $(docker ps -aq)
          docker network create aiweb_network
          docker compose -f docker-compose.staging.yml build
          docker compose -f docker-compose.staging.yml up

      - name: Send Slack Notification
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "Staging build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Staging build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This is for:"
                  }
                },
                 {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ${{ toJSON(github.event.head_commit.message) || 'No description provided.' }}
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Visit <https://stage-app.zettablock.dev/aiweb/|[Staging Env]> to see the latest UI. Hey <@U0750EURA2V>, Please check the UI in Staging."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
